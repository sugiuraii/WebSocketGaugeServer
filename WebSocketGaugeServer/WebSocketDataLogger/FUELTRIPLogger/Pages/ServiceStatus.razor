@page "/servicestatus"
@namespace SZ2.WebSocketGaugeServer.WebSocketDataLogger.FUELTRIPLogger.Pages
@using SZ2.WebSocketGaugeServer.WebSocketDataLogger.FUELTRIPLogger.Model
@using SZ2.WebSocketGaugeServer.WebSocketDataLogger.FUELTRIPLogger.Service
@using System.Threading
@inject FUELTRIPDataViewModel ViewModel
@inject FUELTRIPService Service
@inject IJSRuntime JsRuntime

<h1>FUELTRIPLogger status</h1>

<h2>Current status</h2>
<div class="card border-primary mb-2">
    <div class="card-header">FUELTRIP status </div>
    <div class="card-body">
        <li class="list-group-item">Total trip: @ViewModel.TotalTrip.ToString("F3")</li>
        <li class="list-group-item">Total fuel : @ViewModel.TotalFuelConsumption.ToString("F3")</li>
        <li class="list-group-item">Total trip per fuel : @ViewModel.TotalTripPerFuel.ToString("F3")</li>
        <li class="list-group-item">Sect span: @ViewModel.SectSpan</li>
        <li class="list-group-item">Sect trip per fuel: @renderArray(ViewModel.SectTripPerFuelArray)</li>
    </div>
</div>
<div class="card border-primary mb-2">
    <div class="card-header">FUELTRIP control </div>
    <div class="card-body">
        <button class="btn btn-primary" id="btnReset" @onclick="SectFUElTRIPReset">Reset Sect FUEL/TRIP</button>
        <button class="btn btn-primary" id="btnReset" @onclick="TotalFUElTRIPReset">Reset Total FUEL/TRIP</button>
    </div>
</div>

@code {
    private const int UpdatePeriodInMillisecond = 500;
    protected override void OnInitialized()
    {
        var timer = new Timer((_) => InvokeAsync(() => StateHasChanged()), null, 0, UpdatePeriodInMillisecond);
        base.OnInitialized();
    }

    private string renderArray(double[] array)
    {
        string outstr = "";
        for (int i = 0; i < array.Length; i++)
        {
            outstr += array[i].ToString("F3");
            if (i != array.Length - 1)
                outstr += ",";
        }

        return outstr;
    }

    private async void SectFUElTRIPReset()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Reset sect fuel trip OK?");
        if (confirmed)
            Service.FUELTripCalculator.resetSectTripFuel();
    }

    private async void TotalFUElTRIPReset()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Reset total fuel trip OK?");
        if (confirmed)
            Service.FUELTripCalculator.resetTotalTripFuel();
    }
}